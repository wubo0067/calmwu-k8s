// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/protobuf/sci_auth/sci_openapiauth.proto

// sci_v1_srv_opanapiauth 开放平台鉴权

package sci_v1_srv_opanapiauth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	_ "multi-call/api/protobuf/common/sci_error"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OpenPlatformAuthenticationSrv service

type OpenPlatformAuthenticationSrvService interface {
	// 授权
	AuthorizeToken(ctx context.Context, in *AuthTokenReq, opts ...client.CallOption) (*AuthTokenRes, error)
	// 验证
	VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...client.CallOption) (*VerifyTokenRes, error)
}

type openPlatformAuthenticationSrvService struct {
	c    client.Client
	name string
}

func NewOpenPlatformAuthenticationSrvService(name string, c client.Client) OpenPlatformAuthenticationSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "sci.v1.srv.opanapiauth"
	}
	return &openPlatformAuthenticationSrvService{
		c:    c,
		name: name,
	}
}

func (c *openPlatformAuthenticationSrvService) AuthorizeToken(ctx context.Context, in *AuthTokenReq, opts ...client.CallOption) (*AuthTokenRes, error) {
	req := c.c.NewRequest(c.name, "OpenPlatformAuthenticationSrv.AuthorizeToken", in)
	out := new(AuthTokenRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openPlatformAuthenticationSrvService) VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...client.CallOption) (*VerifyTokenRes, error) {
	req := c.c.NewRequest(c.name, "OpenPlatformAuthenticationSrv.VerifyToken", in)
	out := new(VerifyTokenRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenPlatformAuthenticationSrv service

type OpenPlatformAuthenticationSrvHandler interface {
	// 授权
	AuthorizeToken(context.Context, *AuthTokenReq, *AuthTokenRes) error
	// 验证
	VerifyToken(context.Context, *VerifyTokenReq, *VerifyTokenRes) error
}

func RegisterOpenPlatformAuthenticationSrvHandler(s server.Server, hdlr OpenPlatformAuthenticationSrvHandler, opts ...server.HandlerOption) error {
	type openPlatformAuthenticationSrv interface {
		AuthorizeToken(ctx context.Context, in *AuthTokenReq, out *AuthTokenRes) error
		VerifyToken(ctx context.Context, in *VerifyTokenReq, out *VerifyTokenRes) error
	}
	type OpenPlatformAuthenticationSrv struct {
		openPlatformAuthenticationSrv
	}
	h := &openPlatformAuthenticationSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&OpenPlatformAuthenticationSrv{h}, opts...))
}

type openPlatformAuthenticationSrvHandler struct {
	OpenPlatformAuthenticationSrvHandler
}

func (h *openPlatformAuthenticationSrvHandler) AuthorizeToken(ctx context.Context, in *AuthTokenReq, out *AuthTokenRes) error {
	return h.OpenPlatformAuthenticationSrvHandler.AuthorizeToken(ctx, in, out)
}

func (h *openPlatformAuthenticationSrvHandler) VerifyToken(ctx context.Context, in *VerifyTokenReq, out *VerifyTokenRes) error {
	return h.OpenPlatformAuthenticationSrvHandler.VerifyToken(ctx, in, out)
}
