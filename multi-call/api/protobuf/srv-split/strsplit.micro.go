// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv-split/strsplit.proto

package sci_v1_svr_strsplit

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StrSplitProcess service

type StrSplitProcessService interface {
	Split(ctx context.Context, in *StrSplitReq, opts ...client.CallOption) (*StrSplitRes, error)
	SayHelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error)
}

type strSplitProcessService struct {
	c    client.Client
	name string
}

func NewStrSplitProcessService(name string, c client.Client) StrSplitProcessService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "sci.v1.svr.strsplit"
	}
	return &strSplitProcessService{
		c:    c,
		name: name,
	}
}

func (c *strSplitProcessService) Split(ctx context.Context, in *StrSplitReq, opts ...client.CallOption) (*StrSplitRes, error) {
	req := c.c.NewRequest(c.name, "StrSplitProcess.Split", in)
	out := new(StrSplitRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strSplitProcessService) SayHelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error) {
	req := c.c.NewRequest(c.name, "StrSplitProcess.SayHelloWorld", in)
	out := new(HelloWorldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StrSplitProcess service

type StrSplitProcessHandler interface {
	Split(context.Context, *StrSplitReq, *StrSplitRes) error
	SayHelloWorld(context.Context, *HelloWorldRequest, *HelloWorldResponse) error
}

func RegisterStrSplitProcessHandler(s server.Server, hdlr StrSplitProcessHandler, opts ...server.HandlerOption) error {
	type strSplitProcess interface {
		Split(ctx context.Context, in *StrSplitReq, out *StrSplitRes) error
		SayHelloWorld(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error
	}
	type StrSplitProcess struct {
		strSplitProcess
	}
	h := &strSplitProcessHandler{hdlr}
	return s.Handle(s.NewHandler(&StrSplitProcess{h}, opts...))
}

type strSplitProcessHandler struct {
	StrSplitProcessHandler
}

func (h *strSplitProcessHandler) Split(ctx context.Context, in *StrSplitReq, out *StrSplitRes) error {
	return h.StrSplitProcessHandler.Split(ctx, in, out)
}

func (h *strSplitProcessHandler) SayHelloWorld(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error {
	return h.StrSplitProcessHandler.SayHelloWorld(ctx, in, out)
}
