// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/usermgr/user.proto

package eci_v1_server_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	// client <--- server stream
	GetUserInfoServerStream(ctx context.Context, in *UserRequest, opts ...client.CallOption) (UserService_GetUserInfoServerStreamService, error)
	// client <---> server stream
	GetUserInfoBidirectionalStream(ctx context.Context, opts ...client.CallOption) (UserService_GetUserInfoBidirectionalStreamService, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "eci.v1.server.user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetUserInfoServerStream(ctx context.Context, in *UserRequest, opts ...client.CallOption) (UserService_GetUserInfoServerStreamService, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserInfoServerStream", &UserRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userServiceGetUserInfoServerStream{stream}, nil
}

type UserService_GetUserInfoServerStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*UserResponse, error)
}

type userServiceGetUserInfoServerStream struct {
	stream client.Stream
}

func (x *userServiceGetUserInfoServerStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceGetUserInfoServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceGetUserInfoServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceGetUserInfoServerStream) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userService) GetUserInfoBidirectionalStream(ctx context.Context, opts ...client.CallOption) (UserService_GetUserInfoBidirectionalStreamService, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserInfoBidirectionalStream", &UserRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &userServiceGetUserInfoBidirectionalStream{stream}, nil
}

type UserService_GetUserInfoBidirectionalStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UserRequest) error
	Recv() (*UserResponse, error)
}

type userServiceGetUserInfoBidirectionalStream struct {
	stream client.Stream
}

func (x *userServiceGetUserInfoBidirectionalStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceGetUserInfoBidirectionalStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceGetUserInfoBidirectionalStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceGetUserInfoBidirectionalStream) Send(m *UserRequest) error {
	return x.stream.Send(m)
}

func (x *userServiceGetUserInfoBidirectionalStream) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	// client <--- server stream
	GetUserInfoServerStream(context.Context, *UserRequest, UserService_GetUserInfoServerStreamStream) error
	// client <---> server stream
	GetUserInfoBidirectionalStream(context.Context, UserService_GetUserInfoBidirectionalStreamStream) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		GetUserInfoServerStream(ctx context.Context, stream server.Stream) error
		GetUserInfoBidirectionalStream(ctx context.Context, stream server.Stream) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) GetUserInfoServerStream(ctx context.Context, stream server.Stream) error {
	m := new(UserRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserServiceHandler.GetUserInfoServerStream(ctx, m, &userServiceGetUserInfoServerStreamStream{stream})
}

type UserService_GetUserInfoServerStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UserResponse) error
}

type userServiceGetUserInfoServerStreamStream struct {
	stream server.Stream
}

func (x *userServiceGetUserInfoServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceGetUserInfoServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceGetUserInfoServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceGetUserInfoServerStreamStream) Send(m *UserResponse) error {
	return x.stream.Send(m)
}

func (h *userServiceHandler) GetUserInfoBidirectionalStream(ctx context.Context, stream server.Stream) error {
	return h.UserServiceHandler.GetUserInfoBidirectionalStream(ctx, &userServiceGetUserInfoBidirectionalStreamStream{stream})
}

type UserService_GetUserInfoBidirectionalStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UserResponse) error
	Recv() (*UserRequest, error)
}

type userServiceGetUserInfoBidirectionalStreamStream struct {
	stream server.Stream
}

func (x *userServiceGetUserInfoBidirectionalStreamStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceGetUserInfoBidirectionalStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceGetUserInfoBidirectionalStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceGetUserInfoBidirectionalStreamStream) Send(m *UserResponse) error {
	return x.stream.Send(m)
}

func (x *userServiceGetUserInfoBidirectionalStreamStream) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
