// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package protojson

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonAedab12dDecodePciIpresmgrApiProtoJson(in *jlexer.Lexer, out *WB2IPResMgrScaleIPPoolReq) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ReqID":
			out.ReqID = string(in.String())
		case "K8SApiResourceKind":
			out.K8SApiResourceKind = K8SApiResourceKindType(in.Int16())
		case "K8SClusterID":
			out.K8SClusterID = string(in.String())
		case "K8SNamespace":
			out.K8SNamespace = string(in.String())
		case "K8SApiResourceName":
			out.K8SApiResourceName = string(in.String())
		case "K8SApiResourceOldReplicas":
			out.K8SApiResourceOldReplicas = int(in.Int())
		case "K8SApiResourceNewReplicas":
			out.K8SApiResourceNewReplicas = int(in.Int())
		case "NetRegionalID":
			out.NetRegionalID = string(in.String())
		case "SubnetID":
			out.SubnetID = string(in.String())
		case "SubnetGatewayAddr":
			out.SubnetGatewayAddr = string(in.String())
		case "SubnetCIDR":
			out.SubnetCIDR = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonAedab12dEncodePciIpresmgrApiProtoJson(out *jwriter.Writer, in WB2IPResMgrScaleIPPoolReq) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ReqID\":")
	out.String(string(in.ReqID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"K8SApiResourceKind\":")
	out.Int16(int16(in.K8SApiResourceKind))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"K8SClusterID\":")
	out.String(string(in.K8SClusterID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"K8SNamespace\":")
	out.String(string(in.K8SNamespace))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"K8SApiResourceName\":")
	out.String(string(in.K8SApiResourceName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"K8SApiResourceOldReplicas\":")
	out.Int(int(in.K8SApiResourceOldReplicas))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"K8SApiResourceNewReplicas\":")
	out.Int(int(in.K8SApiResourceNewReplicas))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"NetRegionalID\":")
	out.String(string(in.NetRegionalID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"SubnetID\":")
	out.String(string(in.SubnetID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"SubnetGatewayAddr\":")
	out.String(string(in.SubnetGatewayAddr))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"SubnetCIDR\":")
	out.String(string(in.SubnetCIDR))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WB2IPResMgrScaleIPPoolReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAedab12dEncodePciIpresmgrApiProtoJson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WB2IPResMgrScaleIPPoolReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAedab12dEncodePciIpresmgrApiProtoJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WB2IPResMgrScaleIPPoolReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAedab12dDecodePciIpresmgrApiProtoJson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WB2IPResMgrScaleIPPoolReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAedab12dDecodePciIpresmgrApiProtoJson(l, v)
}
