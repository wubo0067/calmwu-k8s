// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: eci_namespace.proto

package eci_v1_namespace

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for NamespaceSvr service

type NamespaceSvrService interface {
	GetNamespace(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
}

type namespaceSvrService struct {
	c    client.Client
	name string
}

func NewNamespaceSvrService(name string, c client.Client) NamespaceSvrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "eci.v1.namespace"
	}
	return &namespaceSvrService{
		c:    c,
		name: name,
	}
}

func (c *namespaceSvrService) GetNamespace(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "NamespaceSvr.GetNamespace", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NamespaceSvr service

type NamespaceSvrHandler interface {
	GetNamespace(context.Context, *CallRequest, *CallResponse) error
}

func RegisterNamespaceSvrHandler(s server.Server, hdlr NamespaceSvrHandler, opts ...server.HandlerOption) error {
	type namespaceSvr interface {
		GetNamespace(ctx context.Context, in *CallRequest, out *CallResponse) error
	}
	type NamespaceSvr struct {
		namespaceSvr
	}
	h := &namespaceSvrHandler{hdlr}
	return s.Handle(s.NewHandler(&NamespaceSvr{h}, opts...))
}

type namespaceSvrHandler struct {
	NamespaceSvrHandler
}

func (h *namespaceSvrHandler) GetNamespace(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.NamespaceSvrHandler.GetNamespace(ctx, in, out)
}
