// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/examples/booking/srv/auth/proto/auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/examples/booking/srv/auth/proto/auth.proto

It has these top-level messages:
	Request
	Result
	Customer
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthService interface {
	VerifyToken(ctx context.Context, in *Request, opts ...client.CallOption) (*Result, error)
}

type authService struct {
	c           client.Client
	serviceName string
}

func NewAuthService(serviceName string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &authService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *authService) VerifyToken(ctx context.Context, in *Request, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.VerifyToken", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	VerifyToken(context.Context, *Request, *Result) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) {
	type auth interface {
		VerifyToken(ctx context.Context, in *Request, out *Result) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) VerifyToken(ctx context.Context, in *Request, out *Result) error {
	return h.AuthHandler.VerifyToken(ctx, in, out)
}
